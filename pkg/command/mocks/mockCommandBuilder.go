// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/victoraldir/cutcast/pkg/command (interfaces: CommandBuilder)

// Package command is a generated GoMock package.
package command

import (
	reflect "reflect"

	command "github.com/victoraldir/cutcast/pkg/command"
	gomock "go.uber.org/mock/gomock"
)

// MockCommandBuilder is a mock of CommandBuilder interface.
type MockCommandBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockCommandBuilderMockRecorder
}

// MockCommandBuilderMockRecorder is the mock recorder for MockCommandBuilder.
type MockCommandBuilderMockRecorder struct {
	mock *MockCommandBuilder
}

// NewMockCommandBuilder creates a new mock instance.
func NewMockCommandBuilder(ctrl *gomock.Controller) *MockCommandBuilder {
	mock := &MockCommandBuilder{ctrl: ctrl}
	mock.recorder = &MockCommandBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandBuilder) EXPECT() *MockCommandBuilderMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockCommandBuilder) Build(arg0 string, arg1 ...string) command.CommandExecutor {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Build", varargs...)
	ret0, _ := ret[0].(command.CommandExecutor)
	return ret0
}

// Build indicates an expected call of Build.
func (mr *MockCommandBuilderMockRecorder) Build(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockCommandBuilder)(nil).Build), varargs...)
}
